<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Harsh's blog (GSoC)</title><link>https://hargup.github.io/</link><description></description><atom:link href="https://hargup.github.io/categories/gsoc.xml" type="application/rss+xml" rel="self"></atom:link><language>en</language><lastBuildDate>Thu, 26 Jun 2014 18:09:40 GMT</lastBuildDate><generator>Nikola &lt;http://getnikola.com/&gt;</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>week 4</title><link>https://hargup.github.io/posts/week-4.html</link><description>&lt;div&gt;&lt;h3&gt;Intersections of Infinitely indexed sets&lt;/h3&gt;
&lt;p&gt;This week I implemented a method to do intersection of imagesets using the
solutions of Diophantine equations at &lt;a href="https://github.com/sympy/sympy/pull/7587"&gt;PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Say you have
to find the intersection of sets &lt;code&gt;2*n| n in Integers&lt;/code&gt; and &lt;code&gt;3*m| m in Integers&lt;/code&gt;.
The intersection of these sets is the set of the common values in the two sets,
which in this case is equivalent to the values of &lt;code&gt;n&lt;/code&gt; for which the equation &lt;code&gt;2*n - 3*m&lt;/code&gt; has
some integral solution in &lt;code&gt;m&lt;/code&gt;. Or the values of &lt;code&gt;m&lt;/code&gt; for which the &lt;code&gt;2*n - 3*m&lt;/code&gt;
has some integral solution in &lt;code&gt;n&lt;/code&gt;. Diophantine equations are equations for
which only integral solutions are searched for.
The Diophantine module was written by
&lt;a href="https://github.com/thilinarmtb"&gt;Thilina&lt;/a&gt; as his GSoC project last year.
It gives the parametric solution for such equation.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre&gt;&lt;span class="n"&gt;In&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;diophantine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Solution is sorted according to alphabetic order of the variables involved.
So the value of LHS (&lt;code&gt;2*n&lt;/code&gt;) for which the equation is &lt;code&gt;2*(-3*t)&lt;/code&gt; that is &lt;code&gt;-6*t&lt;/code&gt;
and it is the intersection of the sets described above &lt;code&gt;-6*t| t in Integers&lt;/code&gt;.
Since &lt;code&gt;-6*t| t in Integers&lt;/code&gt; is same as &lt;code&gt;6*t| t in Integers&lt;/code&gt; I also wrote some
simplification rules for the imagesets with Integers as baseset.&lt;/p&gt;
&lt;h3&gt;Sets for Invert Function&lt;/h3&gt;
&lt;p&gt;The sets module turned out to be better than I expected. I had a perception
that substitutions doesn't work properly with sets and I have even opened an
&lt;a href="https://github.com/sympy/sympy/issues/7483"&gt;issue&lt;/a&gt; for that but it turned out
I hadn't looked closely enough. It worked well for the free variables and it
didn't worked for the things it shouldn't work i.e., the bound variables in the
imagesets.&lt;/p&gt;
&lt;p&gt;Using sets simplified the code. All the list comprehensions like this
&lt;code&gt;[i.subs(symbol, symbol/g) for i in _invert(h, symbol)]&lt;/code&gt; were converted to
simple substitutions for sets and other sets operations.  &lt;code&gt;_invert(h,
symbol).subs(symbol, symbol/g)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just by changing the output of invert to sets, then by adding the inverse of
trigonometric function and writing the code to rewrite then as tan I was able
to return all the solutions of the equations like &lt;code&gt;cos(x) + sin(x) == 0&lt;/code&gt; it
turned to out to easier than I thought. Using sets as output makes thinking
about the mathematics of the solvers much more easier and the code comes
out to be pretty natural. Now when we can see the results I can surely say
there can be no better output for solvers than sets.&lt;/p&gt;
&lt;p&gt;This week I'll study LambertW function and then code additional techniques to
solve real equations. I'll also try to figure out techniques to perform Union
on infinitely indexed sets.&lt;/p&gt;&lt;/div&gt;</description><category>sympy</category><category>GSoC</category><guid>https://hargup.github.io/posts/week-4.html</guid><pubDate>Wed, 18 Jun 2014 05:59:01 GMT</pubDate></item><item><title>week 3</title><link>https://hargup.github.io/posts/week-3.html</link><dc:creator>Harsh Gupta</dc:creator><description>&lt;div&gt;&lt;p&gt;Hi,
At the start of this week I wrote a method to check if a given solution
lies in the domain of the equation or not. The problem it targeted was equations like &lt;code&gt;(x
- 1)/(1 + 1/(x - 1))&lt;/code&gt; though at &lt;code&gt;x = 1&lt;/code&gt; the eqution has value zero the point is
not present in the domain of the given equation. Though there is some
disagreement on the implementation, the idea was to traverse the expression
tree and check if any of the subexpression goes unbounded for the given
value.  Later I observed that caching was messing with the tests. Sometimes
the tests passed and sometimes the same test suit run without any
modification in the code failed. To do the check on the subexpressions I need
to have a copy of the original equation before the solver performs any
simplification on it. Being not sure of the mutability of the equations
I used deepcopy to copy the original equation to a variable. Later in a
meeting we figured out that deepcopy was messing with caching. Aaron told me
that every expression in sympy is immutable so don't need to perform deepcopy
on anything.&lt;/p&gt;
&lt;p&gt;This week we will restart working on the sets to represent infinite solutions,
Almost every equation in complex domain other than polynomials and rationals
has infinitly many solutions. For example even the simple equation &lt;code&gt;exp(x) ==
1&lt;/code&gt; has infinitely many solutions that is &lt;code&gt;i*2*n*pi&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is an integer.
To return these solutions we first need to have infrastructure to handle them.
The old(current) solvers does it wrong, it implicity mixes up the complex and real
domains, the answer it returns to &lt;code&gt;exp(x) == 1&lt;/code&gt; is only &lt;code&gt;[0]&lt;/code&gt;. Earlier I was also doing it wrong
so I decided that I should have two seperate solvers for reals and complex
instead of one. This also simplifed the code for the reals solvers to a large
extent.&lt;/p&gt;&lt;/div&gt;</description><category>sympy</category><category>GSoC</category><guid>https://hargup.github.io/posts/week-3.html</guid><pubDate>Mon, 09 Jun 2014 14:50:06 GMT</pubDate></item><item><title>Week 1 and Week 2</title><link>https://hargup.github.io/posts/week-1-and-week-2.html</link><description>&lt;div&gt;&lt;p&gt;Hi, As I told you about in the previous post, My work for this summer will be
improving the current equation solvers of sympy. There are basically three
thing I'll have to do.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Create a basic set infrastructure for solvers to return sets.&lt;/li&gt;
&lt;li&gt;Rewrite the current solvers to be clean and robust.&lt;/li&gt;
&lt;li&gt;On the top of 1 and 2 write new solvers and function, they will returning
   and handling all the solutions of equations like &lt;code&gt;sin(x) == 0&lt;/code&gt; and a general
   singularity finder.&lt;/li&gt;
&lt;/ol&gt;&lt;p&gt;You can look at the details in my
&lt;a href="https://github.com/sympy/sympy/wiki/GSoC-2014-Application-Harsh-Gupta:-Solvers"&gt;proposal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A started working on the sets module in the community bonding period, basically
writing a set difference class at &lt;a href="https://github.com/sympy/sympy/pull/7462"&gt;this
PR&lt;/a&gt; , I try to get it merged by the
end of this week.&lt;/p&gt;
&lt;p&gt;Set are a pretty general mathematical constructs, and you can solve a lot of
hard problems if you could compute general set operations. The whole number
theory can be defined in terms of sets. So, computing general set operations,
e.g, intersection, unions is pretty hard problem too and we should not aim to
do all them.  In a meeting with Matthew and Sergey we discussed that it would
    be better if complete the part 2 first. It will give a general idea about
    what capabilities of sets we need.  Also some sets problems can be reduced
    to equations and vice versa.  &lt;!-- Explain --&gt;&lt;/p&gt;
&lt;p&gt;I've started working on the univariate solvers &lt;a href="https://github.com/sympy/sympy/pull/7523"&gt;at
PR&lt;/a&gt;.  My aim for this
week will be.&lt;/p&gt;
&lt;ol&gt;&lt;li&gt;Completing the rational solvers&lt;/li&gt;
&lt;li&gt;Getting the open PR for the sets merged.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>sympy</category><category>GSoC</category><guid>https://hargup.github.io/posts/week-1-and-week-2.html</guid><pubDate>Mon, 02 Jun 2014 11:45:54 GMT</pubDate></item></channel></rss>